scenario: "Validate: Variables in allowed position"
background:
  schema-file: validation.schema.graphql
tests:
  - name: variable type mismatch
    given:
      query: |
        query VariableTypeMismatch($a: Int!) {
          dog { name(surname: $a) }
        }
    when:
      validate: [VariablesInAllowedPosition]
    then:
      - error-count: 1
      - error: "Variable '$a' of type 'Int!' used in position expecting type 'Boolean'."
        loc: {line: 2, column: 23}
  - name: non-null mismatch
    given:
      query: |
        query NonNullMismatch($a: Int) {
          complicatedArgs { nonNullIntArgField(nonNullIntArg:$a) }
        }
    when:
      validate: [VariablesInAllowedPosition]
    then:
      - error-count: 1
      - error: "Variable '$a' of type 'Int' used in position expecting type 'Int!'."
        loc: {line: 2, column: 54}
  - name: non-null is subtype of nullable
    given:
      query: |
        query NonNullMatch($a: Int!) {
          complicatedArgs { intArgField(intArg:$a) }
        }
    when:
      validate: [VariablesInAllowedPosition]
    then:
      passes:
  - name: list is not subtype of item
    given:
      query: |
        query NonNullMismatch($a: [Int]) {
          complicatedArgs { intArgField(intArg:$a) }
        }
    when:
      validate: [VariablesInAllowedPosition]
    then:
      - error-count: 1
      - error: "Variable '$a' of type '[Int]' used in position expecting type 'Int'."
        loc: {line: 2, column: 40}
  - name: item is not subtype of list
    given:
      query: |
        query NonNullMismatch($a: String) {
          complicatedArgs { stringListArgField(stringListArg:$a) }
        }
    when:
      validate: [VariablesInAllowedPosition]
    then:
      - error-count: 1
      - error: "Variable '$a' of type 'String' used in position expecting type '[String]'."
        loc: {line: 2, column: 54}
  - name: member is subtype of union
    given:
      query: |
        query UnionSubtype($a:Human) {
          complicatedArgs { unionField(unionArg:$a) }
        }
    when:
      validate: [VariablesInAllowedPosition]
    then:
      passes:
  - name: implementation is subtype of interface
    given:
      query: |
        query InterfaceSubtype($a:Intelligent) {
          complicatedArgs { interfaceField(interfaceArg:$a) }
        }
    when:
      validate: [VariablesInAllowedPosition]
    then:
      passes:
  - name: not part of the union
    given:
      query: |
        query DisjointUnion($a:Alien) {
          complicatedArgs { unionField(unionArg:$a) }
        }
    when:
      validate: [VariablesInAllowedPosition]
    then:
      - error-count: 1
      - error: "Variable '$a' of type 'Alien' used in position expecting type 'DogOrHuman'."
        loc: {line: 2, column: 41}
  - name: doesn't implement the interface
    given:
      query: |
        query InterfaceSubtype($a:Pet) {
          complicatedArgs { interfaceField(interfaceArg:$a) }
        }
    when:
      validate: [VariablesInAllowedPosition]
    then:
      - error-count: 1
      - error: "Variable '$a' of type 'Pet' used in position expecting type 'Human'."
        loc: {line: 2, column: 49}
